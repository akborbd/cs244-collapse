To reproduce lazy opt-ack results:

cd schnell
make
cd ..
mkdir out
sudo ./run.sh

This runs a mininet simulation that downloads a 10MB file twice.  The
first time is with a standard wget call.  The second time is with a
lazy opt-ack attack.

We produce graphs in "out/" showing the cwnd size over time for each
attack.  The wget results can be seen in "out/cwnd.png".  The lazy
opt-ack results can be seen in "out/cwnd_lazy.png"

We also implemented a non-lazy opt-ack attack, which sends acks before
it receives the corresponding data packets.  To show the coupling of
data packets and acks on the victim side, we graph data sequence
numbers and ack sequence numbers as seen by the victim.
Unfortunately, tcpprobe seems to only show packets from one side of
this connection, so you have to manually run wireshark to get the
data.  For comparison, first do this for the lazy attack.

1. Uncomment "#CLI(net)" from collapse.py

2. sudo python collapse.py

3. When presented with a "mininet>" prompt, run "xterm h1" and "xterm h2"

4. In the h2 xterm, run "iptables -I OUTPUT -p tcp --dport 8000
--tcp-flags RST RST -j DROP".  This prevents the kernel from sending a
reset in a raw socket connection.

5. In the h2 xterm, run "wireshark &".  Add the filter "tcp.port ==
8000".  Start capturing packets on "h1-eth0".

5. In the h1 xterm, run "python -m SimpleHTTPServer"

6. In the h2 xterm, run "./schnell/schnell -v -7 http://10.0.0.2:8000".

7. When it completes (it takes ~5s), export the packets you captured
in wireshark via "File | Export packet dissection | CSV".

8. In your host terminal, run "python plot_seqno.py -f
<wireshark_file>".  This should display a graph of sequence numbers
and ack numbers as seen by the client.  We see that they are in sync.

To compare, rerun these steps for the non-lazy attack.  Each step is
the same, except for step 6 where you run with "-1" instead of "-7".

This should show the "overrunning" effect.  Since the attacker is
sending acks before it sees the data packets, it may send them too
fast, resulting in the ack numbers exceeding the client's cwnd.  The
client ignores these out of window acks, times out, and retransmits.
The sender detects the overrun via these retransmit packets, and
restores the ack number to the sender's data sequence number.  You can
see this happens when the ack line drops back down to meet the data
line.  In the original paper, they were able to resynchronize the ack
numbers and data numbers by estimating the sender's cwnd.  We weren't
able to reproduce that result.
